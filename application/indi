<?php

// Setup WIN constant, indicating whether we're on Windows
define('WIN', preg_match('~^WIN~', PHP_OS));

// Get this directory with 'right' slashes
$_dir_ = str_replace('\\', '/', __DIR__);

// Get project root
$doc = realpath($_dir_ . '/../../../..');

// Get contents of ini file
$ini = file_get_contents($doc . '/application/config.ini');

// Get ini->db->name
preg_match('~\[db\].*?name\s*=\s*([a-zA-Z0-9_\-]+)~ms', $ini, $m);

// Get indi-engine instance name
$instance = $m[1];

// Remove 'indi' from args list
array_shift($argv);

// Opts and flags
$opts = []; $flag = [];

// Distinct between args, opts and flags
foreach ($argv as $idx => $arg) {
    if (preg_match('~^--?([a-z]+)~', $arg, $fm)) {
        if (preg_match('~^--([a-z]+)=([a-zA-Z0-9_\-]+)$~', $arg, $om)) {
            $opts[$om[1]] = $om[2];
        } else {
            $flag[$fm[1]] = true;
        }
        unset($argv[$idx]);
    }
}

// Re-index $argv
$argv = array_values($argv);

// Get action
$action = $argv[0] ?? '';

// If nothing given, use '-i' flag
if (!$action && !$flag && !$opts) $flag['i'] = true;

// If any flag is given
if ($flag) {

    // Make sure below include-operator will work in current directory content
    chdir(__DIR__);

    // Include func.php
    include_once '../library/func.php';
}

// If '-d' flag is given, run the action in detached-mode
if ($flag['d'] ?? 0) {

    // Append indi-engine instance name
    $argv []= "--instance=$instance";

    // Join args by whitespace
    $args = join(' ', $argv);

    // Build command to be run in detached mode
    $cmd = "php indi $args";

    // Stdout file
    $out = tempnam("$doc/log", 'indi');

    // If we're on Windows
    if (WIN) {

        // Prepare command in windows-style
        $cmd = "start /B $cmd > $out";

        // Start using popen() as this seems be the only way to prevent this php script from being hanged
        pclose(popen($cmd, "r"));

        // Wait a bit for stdout file contents to be written
        usleep(500000);

    // Else
    } else {

        // Exec command in unix-style
        `$cmd > $out &`;

        // Wait a bit for stdout file contents to be written
        usleep(500000);
    }

    // If stdout file is not empty it means something went wrong
    if ($txt = file_get_contents($out)) {

        // Print what's wrong
        echo $txt;

    // Else if PID of a newly spawned action process is detectable
    } else if ($pid = getpid($action, $instance)) {

        // Print that
        echo "Spawned $pid" . PHP_EOL;
    }

    // Unlink stdout file
    @unlink($out);

// Else if '-k' or '-i' flag is given
} else if (isset($flag['k']) || isset($flag['i'])) {

    // Try to get PID
    $pid = getpid($action, $instance);

    // If no PID found - do mention that
    if (!$pid) echo 'No process found' . PHP_EOL; else {

        // If '-i' flag is given - echo PID
        if ($flag['i'] ?? 0) {

            // If return value contain multiple lines
            $lines = explode("\n", $pid);

            // Trim header
            if (WIN) array_shift($lines);

            // Print info
            echo (count($lines) > 1 || !$action ? join("\n", $lines) : "Running $pid") . PHP_EOL;

        // Else if '-k' flag is given - try to kill
        } else {

            // Kill process
            if (WIN) {
                echo `taskkill /T /F /PID $pid 2>&1`;
            } else {
                echo `./tkill $pid` . "Killed $pid" . PHP_EOL;
            }

            // Remove old tmp files where possible
            foreach (glob("$doc/log/ind*.tmp") as $tmp) @unlink($tmp);
        }
    }

// Else run action in syncronous mode
} else {

    // Get action
    if (!$action) exit('No action specified' . PHP_EOL);

    // Setup CMD constant, indicating that this execution was started via command line
    define('CMD', true);

    // Get vendor name
    preg_match('~^(?<DOCUMENT_ROOT>.+?)/(?<VDR>vendor/.+?)/~', $_dir_, $m);

    // Get filepath of a temporary file, containing environment variables
    if (isset($argv[1])) {

        // If 2nd arg is not a path of an existsing file - exit
        if (!is_file($tmp = $argv[1])) exit("File \"$tmp\" does not exist");

        // Extract environment variables
        extract(json_decode(file_get_contents($tmp = $argv[1]), true));

        // Delete temporary file
        unlink($tmp);
    }

    // Provide default values for environment variables at least expected by Indi Engine
    $default = [
        'DOCUMENT_ROOT' => $m['DOCUMENT_ROOT'],
        'REQUEST_METHOD' => 'GET',
        'HTTP_HOST' => 'localhost',
        'VDR' => $m['VDR'],
        'STD' => ''
    ];

    // Apply those
    foreach ($default as $key => $value)
        if (!isset($_SERVER[$key]) || !$_SERVER[$key])
            $_SERVER[$key] = $value;

    // Change current working directory to project root
    chdir($doc);

    // Boot
    include 'index.php';

    // Dispatch method
    uri()->dispatch($action, $args ?? []);
}