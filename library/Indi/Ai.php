<?php
class Indi_Ai {

    /**
     * Singleton instance
     *
     * @var Indi_Ai
     */
    protected static $_instance = null;

    /**
     * @return Indi_Ai
     */
    public static function factory()
    {
        return self::$_instance ??= new self();
    }

    public function scratch(string $prompt, string $model) {

        // Enable logging of jflush-events
        Indi::logging('jflush', true);

        // Purge all customizations to get back to bare Indi Engine app
        Indi::purge();

        $gemini = new Gemini();

        // Get php-code generated by GPT
        $text = 'data/gemini/data-structures.txt';
        //$resp = $gemini->prompt($_SERVER['prompt']); file_put_contents($text, $resp);
        $code = 'data/gemini/data-structures.php';

        // Get php-code generated by GPT from local file
        $gemini->prepare($text, $code);
        $php = file_get_contents($code);
        $php = str_replace("\r\n", "\n", $php);

        // Amend php-code to be able to count calls and track progress
        $step = "Creating the app"; $idx = 0;
        $php = preg_replace('~](\)->save\(|)\);$~m', '$0 progress(++$idx, "$step: {percent}%");', $php, count: $total);

        // Write amended php-code to a file and execute it
        file_put_contents($code, $php);
        progress("$step...", $total);
        include $code;
    }

    public function improve(string $prompt, string $model) {
        jflush(false, 'Evolving current app via AI is not yet supported');
    }


    public function dialog(Indi_Controller $ctrl) {

        // Setup a flag indicating whether current Indi Engine app is a bare app
        // which would be the case if current app has no custom entities so far
        $isBare = ! m()->all('`fraction` = "custom"')->count();

        // Define 'Purpose'-field to be added further to 'Build with AI'-dialog
        m()->fields()->add([
            'alias' => 'purpose',
            'columnTypeId' => 'ENUM',
            'elementId' => 'combo',
            'storeRelationAbility' => 'one',
            'relation' => 'enumset',
            'mode' => 'hidden',
        ]);

        // Define choices for that field
        m()->fields('purpose')->nested('enumset', [
            ['alias' => 'scratch', 'title' => 'Build app from ' . wrap('scratch', '<span data-title="Any customizations you\'ve done so far - will be completely purged">', !$isBare)],
            ['alias' => 'improve', 'title' => 'Keep evolving current app'],
        ]);

        // Make sure the long title of a 1st choice won't be cut
        m()->fields('purpose')->param('substr', 200);

        // Define 'AI model'-field to be also added further to same dialog
        m()->fields()->add([
            'alias' => 'model',
            'columnTypeId' => 'ENUM',
            'elementId' => 'combo',
            'storeRelationAbility' => 'one',
            'relation' => 'enumset',
            'mode' => 'hidden',
            'title' => 'AI Model'
        ]);

        // Setup default values
        t()->row = m()->new([
            'purpose' => $isBare ? 'scratch' : 'improve',
            'model' => 'gemini-2.5-flash-preview-04-17',
        ]);

        // Placeholders per choice
        $placeholder = [
            'scratch' => 'Write here something about the app you want to build from scratch...',
            'improve' => 'Write here something you want to adjust, append or remove...',
        ];

        // Ask user for description, build purpose and AI model
        return $ctrl->prompt([
            'title' => t()->action->title,
            'icon' => false,
            'onshow' => 'onAIDialogShow',
            'items' => [
                [
                    'xtype' => 'textarea',
                    'name' => 'prompt',
                    'width' => 600,
                    'emptyText' => $placeholder[t()->row->purpose],
                    'value' => 'i need an app for the zoo',
                    'grow' => true,
                    'growMax' => 300,
                    'growMin' => 30,
                    'margin' => '0 0 6 0',
                    'emptyTextByPurpose' => $placeholder,
                    'isCustomField' => true,
                ],
                [
                    'xtype' => 'container',
                    'layout' => 'hbox',
                    'margin' => '0 0 0 0',
                    'padding' => 0,
                    'defaults' => [
                        'margin' => 0
                    ],
                    'items' => [
                        [
                            'layout' => 'hbox',
                            'flex' => 1,
                            'fieldLabel' => false,
                            'isCustomField' => true,
                            'disabledOptions' => rif($isBare, 'improve'),
                            ... t()->row->radio('purpose'),
                        ],
                        [
                            'flex' => 0.9,
                            'labelWidth' => 50,
                            'isCustomField' => true,
                            ... t()->row->combo('model', [
                                'Gemini' => Gemini::getModels(),
                                'OpenAI' => OpenAI::getModels()
                            ]),
                        ]
                    ],
                ],
            ]
        ]);
    }
}